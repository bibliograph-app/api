interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Connection {
  edges: [Edge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

enum OrderDirection {
  ASC
  DESC
}

type Keyword {
  id: ID!
  name(lang: String!): String!
}

type Author {
  id: ID!
  name: String!
}

interface Reference {
  id: ID!
  title: String!
  authors: [Author!]!

  fromRelations(
    after: String,
    before: String,
    first: Int,
    last: Int,
    orderBy: RelationOrder!,
  ): RelationConnection!
  toRelations(
    after: String,
    before: String,
    first: Int,
    last: Int,
    orderBy: RelationOrder!,
  ): RelationConnection!
}

type Book implements Reference {
  id: ID!
  title: String!
  authors: [Author!]!

  isbn: String
  thumbnail: String

  relations(
    after: String,
    before: String,
    first: Int,
    last: Int,
    orderBy: RelationOrder!,
    query: RelationQuery!
  ): RelationConnection!
}

type Relation implements Node {
  id: ID!
  from: Reference!
  to: Reference!
  type: RelationType!
}

interface RelationType {
  tag: RelationTypeTag!
}

enum RelationTypeTag {
  REFER
  TRANSLATE
}

type RelationReferType implements RelationType {
  tag: RelationTypeTag!
}

type RelationTranslateType implements RelationType {
  tag: RelationTypeTag!
}

type RelationEdge implements Edge {
  cursor: String!
  node: Relation!
}

type RelationConnection implements Connection {
  edges: [RelationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input RelationOrder {
  direction: OrderDirection!
  field: RelationOrderField!
}

enum RelationOrderField {
  TITLE
}

input RelationQuery {
  direction: RelationQueryDirection!
  nest: Int!
  type: []
}

enum RelationQueryDirection {
  FORWARD
  BACKWARD
}

type Query {
  reference(id: ID!): Reference!
}
